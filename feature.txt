@startuml
skinparam defaultTextAlignment center
skinparam shadowing true
skinparam componentStyle uml2
skinparam packageStyle rectangle
skinparam ArrowColor Black
skinparam ArrowThickness 1.5
skinparam roundcorner 15
skinparam linetype ortho
skinparam backgroundColor #F8F8FF

title 🌾 Separated Modules: Crop Prediction System (UML View)

'======================= 🌐 TABLE 1: Web Interface =======================
package "🌐 Web Interface\n(TypeScript + TailwindCSS + Netlify)" #E0FFFF {
  [Crop Prediction UI] as UI_Crop
  [AI Chatbot UI\n(Language Select, Chatbox)] as UI_Chat
  [Pesticide Store UI\n(Filters, Cards)] as UI_Pesticide
  [Fertilizer Store UI\n(Filters, Cards)] as UI_Fertilizer
  [Crop Rotation Guide UI\n(Input: Present Crop)] as UI_Rotation
  [Soil Requirements UI\n(Input: Crop Name)] as UI_Soil
  [Insights Page\n(Refresh → Questions)] as UI_Insights
  [News Page\n(Refresh → Questions)] as UI_News
}

'======================= 🧠 TABLE 2: Backend Services =======================
package "🧠 Flask Backend API (Gunicorn @ 8081)" #FFFACD {
  [Crop Prediction Engine\n(Random Forest, KNN, SVM, NB)] as BE_Crop
  [Model Comparator\n(Metrics: Accuracy, F1, AUC)] as ModelCompare
  [Prediction Response Composer] as Responder
  [Gunicorn Cache & Security] as GunicornLayer

  [Pesticide Filter Processor] as BE_Pesticide
  [Fertilizer Filter Processor] as BE_Fertilizer

  [Rotation Logic Engine] as BE_Rotation
  [Soil Requirements Engine] as BE_Soil

  [AI Chat Processor] as BE_Chat
  [Insights Generator] as BE_Insights
  [News Generator] as BE_News
}

'======================= 📦 TABLE 3: Supabase =======================
package "📦 Supabase (Tables, Buckets, Auth)" #E6E6FA {
  [Crop Table + Images] as SB_Crops
  [Pesticide Table] as SB_Pesticide
  [Fertilizer Table] as SB_Fertilizer
  [Rotation Table] as SB_Rotation
  [Soil Requirements Table] as SB_Soil
  [Insights Qs Table] as SB_Insights
  [News Qs Table] as SB_News
  [Image Bucket Storage] as SB_Bucket
  [Dynamic Uploader] as SB_Uploader
  [Access Policies] as SB_Policy
  [Data Sync Service] as SB_Sync
}

'======================= 🚀 TABLE 4: Render Hosting =======================
package "🚀 Render Hosting (Flask + ML Models)" #FAF0E6 {
  [Flask App Deployer] as Render_Flask
  [Pretrained Model Handler (.pkl)] as Render_Models
  [Gunicorn Runner @8081] as Render_Gunicorn
  [API Endpoint Router] as Render_API
  [Token + Header Validator] as Render_Security
  [Supabase Bridge] as Render_SBBridge
  [Uptime Monitor / Auto-Restart] as Render_Health
}

'======================= 🔄 TABLE 5: Logic + Flow =======================
' Crop Prediction
UI_Crop --> BE_Crop : Send 7 features (N, P, K, etc.)
BE_Crop --> ModelCompare : Evaluate 4 models
ModelCompare --> Responder : Choose best + metrics
Responder --> SB_Crops : Get crop image
Responder --> SB_Sync : Store prediction result
Responder --> UI_Crop : Return JSON + image

' Chatbot
UI_Chat --> BE_Chat : Send Lang + Query
BE_Chat --> Render_API : /chat
Render_API --> GeminiAPI : Ask + Translate
GeminiAPI --> BE_Chat : Return Lang-respected Answer
BE_Chat --> UI_Chat : Display Answer

' Pesticides
UI_Pesticide --> BE_Pesticide : Send filters
BE_Pesticide --> SB_Pesticide
BE_Pesticide --> SB_Bucket
BE_Pesticide --> UI_Pesticide : Return product JSON

' Fertilizers
UI_Fertilizer --> BE_Fertilizer : Filters
BE_Fertilizer --> SB_Fertilizer
BE_Fertilizer --> SB_Bucket
BE_Fertilizer --> UI_Fertilizer

' Crop Rotation
UI_Rotation --> BE_Rotation : Present crop
BE_Rotation --> SB_Rotation
BE_Rotation --> GeminiAPI : Benefits & Notes
BE_Rotation --> UI_Rotation : Return all 4 fields

' Soil Info
UI_Soil --> BE_Soil : Send crop name
BE_Soil --> SB_Soil : Get values
BE_Soil --> UI_Soil

' Insights + News
UI_Insights --> BE_Insights : Refresh
BE_Insights --> SB_Insights
BE_Insights --> GeminiAPI
BE_Insights --> UI_Insights

UI_News --> BE_News : Refresh
BE_News --> SB_News
BE_News --> GeminiAPI
BE_News --> UI_News

'======================= 💡 TABLE 6: AI / Supabase Connectors =======================
package "💡 AI & Supabase Connectors" #F5F5DC {
  [Gemini AI Connector] as GeminiAPI
  [Supabase Sync Handler] as SB_Sync
  [Uploader Auth Logic] as SB_Policy
}

' Render ↔ Supabase
Render_SBBridge --> SB_Sync
Render_SBBridge --> SB_Bucket
Render_SBBridge --> SB_Policy
Render_SBBridge --> SB_Uploader

' Flask Integration
Render_Models --> Render_Flask
Render_Health --> Render_Flask
Render_Flask --> Render_API
Render_API --> Render_Gunicorn
Render_Gunicorn --> GunicornLayer

@enduml
